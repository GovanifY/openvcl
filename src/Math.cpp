/*
 * Math.h
 *
 * Copyright (C) 2004 Jesper Svennevid, Daniel Collin
 *
 * Licensed under the AFL v2.0. See the file LICENSE included with this
 * distribution for licensing terms.
 *
 */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Math.h"

#include <math.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace vcl
{

const Expression::OperatorEntry* Math::mathOperators()
{
	return EXP_TABLE_NAME();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_TABLE_BEGIN(Math)
	EXP_TABLE_ENTRY(Abs,	UNARY)
	EXP_TABLE_ENTRY(Exp,	UNARY)
	EXP_TABLE_ENTRY(ASin,	UNARY)
	EXP_TABLE_ENTRY(Sin,	UNARY)
	EXP_TABLE_ENTRY(Sinh,	UNARY)
	EXP_TABLE_ENTRY(ACos,	UNARY)
	EXP_TABLE_ENTRY(Cos,	UNARY)
	EXP_TABLE_ENTRY(Cosh,	UNARY)
	EXP_TABLE_ENTRY(ATan,	UNARY)
	EXP_TABLE_ENTRY(ATan2,UNARY)
	EXP_TABLE_ENTRY(Tan,	UNARY)
	EXP_TABLE_ENTRY(Pow,	UNARY)
	EXP_TABLE_ENTRY(Log,	UNARY)
	EXP_TABLE_ENTRY(Log10,UNARY)
	EXP_TABLE_ENTRY(Sqrt,	UNARY)
	EXP_TABLE_ENTRY(Pi,		UNARY)
	EXP_TABLE_ENTRY(Mod,	BINARY)
EXP_TABLE_END();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Abs,"abs",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return fabs(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Exp,"exp",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return exp(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,ASin,"asin",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return asin(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Sin,"sin",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return sin(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Sinh,"sinh",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return sinh(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,ACos,"acos",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return acos(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Cos,"cos",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return cos(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Cosh,"cosh",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return cosh(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,ATan,"atan",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return atan(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,ATan2,"atan2",PRI_FUNCTIONS,1)
{
	double op1 = EXP_OP_ARGUMENT();
	double op2 = EXP_OP_ARGUMENT();
	return atan2(op2,op1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Tan,"tan",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return tan(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Pow,"pow",PRI_FUNCTIONS,2)
{
	double op1 = EXP_OP_ARGUMENT();
	double op2 = EXP_OP_ARGUMENT();

	return pow(op2,op1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Log,"log",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return log(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Log10,"log10",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return log10(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Sqrt,"sqrt",PRI_FUNCTIONS,1)
{
	double op = EXP_OP_ARGUMENT();
	return sqrt(op);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Pi,"pi",PRI_FUNCTIONS,0)
{
	return 3.1415926535897932384626433832795029L;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXP_OP_IMPLEMENT(Math,Mod,"%",PRI_FUNCTIONS,2)
{
	double op1 = EXP_OP_ARGUMENT();
	double op2 = EXP_OP_ARGUMENT();

	return fmod(op2,op1);
}



}
