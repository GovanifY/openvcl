///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::emitSource() const
{
	return m_emitSource;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::reduceCode() const
{
	return m_reduceCode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::dumbCode() const
{
	return m_dumbCode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::generateE() const
{
	return m_generateE;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::alignCode() const
{
	return m_alignCode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::deleteTemp() const
{
	return m_deleteTemp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::unrollLoops() const
{
	return m_unrollLoops;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::generateMpg() const
{
	return m_generateMpg;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::showUsage() const
{
	return m_showUsage;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::showVersion() const
{
	return m_showVersion;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void CommandLine::setRunGasp( bool runGasp )
{
	m_runGasp = runGasp;
}

inline bool CommandLine::runGasp() const
{
	return m_runGasp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void CommandLine::setRunCpp( bool runCpp )
{
	m_runCpp = runCpp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::runCpp() const
{
	return m_runCpp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void CommandLine::setNewSyntax( bool newSyntax )
{
	m_newSyntax = newSyntax;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::newSyntax() const
{
	return m_newSyntax;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline unsigned int CommandLine::timeout() const
{
	return m_timeout;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::string& CommandLine::input()
{
	return m_input;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::string& CommandLine::output()
{
	return m_output;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::string& CommandLine::label()
{
	return m_label;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::string& CommandLine::gasp()
{
	return m_gasp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::string& CommandLine::cpp()
{
	return m_cpp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::list<std::string>& CommandLine::includes()
{
	return m_includes;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline unsigned int CommandLine::threshold() const
{
	return m_threshold;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline CommandLine::Option::Option( char s, const char* l, Action ac, bool a )
{
	m_shortName = s;
	if( l )
		m_longName = l;
	m_action = ac;
	m_argument = a;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline CommandLine::Option::Option( const Option& o )
{
	m_shortName = o.m_shortName;
	m_longName = o.m_longName;
	m_action = o.m_action;
	m_argument = o.m_argument;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline char CommandLine::Option::shortName() const
{
	return m_shortName;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const std::string& CommandLine::Option::longName() const
{
	return m_longName;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline CommandLine::Action CommandLine::Option::action() const
{
	return m_action;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool CommandLine::Option::argument() const
{
	return m_argument;
}
