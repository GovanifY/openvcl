///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Dependency::Dependency() : m_alias(NULL), m_state(NULL)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Alias* Dependency::alias() const
{
	return m_alias;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Dependency::setAlias( Alias* alias )
{
	m_alias = alias;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Dependency::setToken( Token& token )
{
	m_token = &token;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Token& Dependency::token() const
{
	assert( m_token );
	return *m_token;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Dependency::setState( BranchState* state )
{
	m_state = state;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline BranchState* Dependency::state() const
{
	return m_state;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::map<Dependency*,Dependency*>& Dependency::input()
{
	return m_input;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::map<Dependency*,Dependency*>& Dependency::output()
{
	return m_output;
}
