///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Operand::Operand( const std::string& name, unsigned int arguments, unsigned int flags, const std::string& pattern, Unit unit, unsigned int throughput, unsigned int latency )
{
	m_name = name;
	m_arguments = arguments;
	m_flags = flags;
	m_pattern = pattern;
	m_unit = unit;
	m_throughput = throughput;
	m_latency = latency;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Operand::Operand( const Operand& o )
{
	m_name = o.m_name;
	m_arguments = o.m_arguments;
	m_flags = o.m_flags;
	m_pattern = o.m_pattern;
	m_unit = o.m_unit;
	m_throughput = o.m_throughput;
	m_latency = o.m_latency;

	m_alternatives = o.m_alternatives;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const std::string& Operand::name() const
{
	return m_name;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline unsigned int Operand::arguments() const
{
	return m_arguments;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline unsigned int Operand::flags() const
{
	return m_flags;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const std::string& Operand::pattern() const
{
	return m_pattern;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Operand::isLowerExecutionPath() const
{
	return (flags() & LOWER) != 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Operand::isUpperExecutionPath() const
{
	return (flags() & UPPER) != 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Operand::isPreprocessor() const
{
	return (flags() & PREPROCESSOR) != 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Operand::addAlternative( const Operand* operand )
{
	m_alternatives.push_back( operand );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const std::list<const Operand*>& Operand::alternatives() const
{
	return m_alternatives;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Operand::Unit Operand::unit() const
{
	return m_unit;
}

